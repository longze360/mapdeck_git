% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/administrative-sampler.R,
%   R/spatial-sampling-engine.R
\name{spatial_sample_administrative}
\alias{spatial_sample_administrative}
\title{Administrative Boundary Sampling}
\usage{
spatial_sample_administrative(
  admin_polygons,
  total_samples,
  allocation_method = "proportional",
  weight_column = NULL,
  admin_column = NULL,
  concurrent = FALSE,
  use_gpu = TRUE,
  seed = NULL
)

spatial_sample_administrative(
  admin_polygons,
  total_samples,
  allocation_method = "proportional",
  weight_column = NULL,
  admin_column = NULL,
  concurrent = FALSE,
  use_gpu = TRUE,
  seed = NULL
)
}
\arguments{
\item{admin_polygons}{sf object with administrative polygons}

\item{total_samples}{Integer total number of samples to generate}

\item{allocation_method}{Method for allocating samples: "proportional", 
"equal", or "custom"}

\item{weight_column}{Column name for custom weights (required for "custom")}

\item{admin_column}{Column name for administrative unit identifiers}

\item{concurrent}{Logical indicating if concurrent processing should be used}

\item{use_gpu}{Logical indicating if GPU acceleration should be used}

\item{seed}{Optional random seed for reproducibility}

\item{max_workers}{Integer maximum number of parallel workers (default: auto-detect)}

\item{progress}{Logical whether to show progress indicators}
}
\value{
sf object with sampled points including administrative unit identifiers

sf object with sampled points including administrative unit info
}
\description{
Generate random coordinate points within administrative boundaries with
support for different allocation strategies and concurrent processing.

Perform spatial sampling within administrative boundaries with support for
different allocation strategies.
}
\details{
This function generates random coordinate points within administrative boundaries
using different allocation strategies:

- "proportional": Allocates samples proportionally to polygon area
- "equal": Distributes samples equally across all administrative units
- "custom": Uses custom weights from specified column

Concurrent processing is automatically enabled for datasets with more than 10
administrative units and can significantly improve performance for large datasets.
Progress indicators help monitor processing of large datasets.
}
\examples{
\donttest{
# Create sample administrative polygons
library(sf)
coords_list <- list(
  matrix(c(0, 0, 1, 0, 1, 1, 0, 1, 0, 0), ncol = 2, byrow = TRUE),
  matrix(c(1, 0, 3, 0, 3, 1, 1, 1, 1, 0), ncol = 2, byrow = TRUE)
)
polygons <- lapply(coords_list, function(x) st_polygon(list(x)))
admin_data <- data.frame(admin_id = c("A", "B"))
admin_sf <- st_sf(admin_data, geometry = st_sfc(polygons), crs = 4326)

# Proportional allocation (default)
samples <- spatial_sample_administrative(admin_sf, total_samples = 100)

# Equal allocation
equal_samples <- spatial_sample_administrative(
  admin_sf, 
  total_samples = 100, 
  allocation_method = "equal"
)

# Custom allocation with weights
admin_sf$population <- c(1000, 2000)
custom_samples <- spatial_sample_administrative(
  admin_sf,
  total_samples = 100,
  allocation_method = "custom",
  weight_column = "population"
)

# Concurrent processing for large datasets
large_samples <- spatial_sample_administrative(
  admin_sf,
  total_samples = 1000,
  concurrent = TRUE,
  max_workers = 4,
  progress = TRUE
)
}

\donttest{
# Load administrative boundaries (example with mock data)
library(sf)

# Create mock administrative polygons
admin_bounds <- data.frame(
  admin_id = c("A", "B", "C"),
  area = c(100, 200, 150)
)

# Convert to sf polygons (simplified example)
coords_list <- list(
  matrix(c(0,0, 1,0, 1,1, 0,1, 0,0), ncol=2, byrow=TRUE),
  matrix(c(1,0, 3,0, 3,2, 1,2, 1,0), ncol=2, byrow=TRUE),
  matrix(c(0,1, 2,1, 2,2.5, 0,2.5, 0,1), ncol=2, byrow=TRUE)
)

polygons <- lapply(coords_list, function(x) st_polygon(list(x)))
admin_sf <- st_sf(admin_bounds, geometry = st_sfc(polygons))

# Proportional allocation (default)
prop_samples <- spatial_sample_administrative(admin_sf, total_samples = 100)

# Equal allocation
equal_samples <- spatial_sample_administrative(admin_sf, 
                                               total_samples = 90,
                                               allocation_method = "equal")

# Custom allocation based on area column
custom_samples <- spatial_sample_administrative(admin_sf, 
                                                total_samples = 120,
                                                allocation_method = "custom",
                                                weight_column = "area")
}

}
