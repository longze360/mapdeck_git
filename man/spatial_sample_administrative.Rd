% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spatial-sampling-engine.R
\name{spatial_sample_administrative}
\alias{spatial_sample_administrative}
\title{Administrative Boundary Spatial Sampling}
\usage{
spatial_sample_administrative(
  admin_polygons,
  total_samples,
  allocation_method = c("proportional", "equal", "custom"),
  allocation_weights = NULL,
  weight_column = NULL,
  concurrent = TRUE,
  progress = TRUE,
  validate_boundaries = TRUE,
  max_attempts = 1000,
  seed = NULL
)
}
\arguments{
\item{admin_polygons}{Spatial polygons data (sf object) containing administrative boundaries}

\item{total_samples}{Integer total number of samples to generate across all boundaries}

\item{allocation_method}{Character string specifying allocation method:
\itemize{
  \item "proportional": Allocate samples based on polygon area or population
  \item "equal": Equal number of samples per administrative unit
  \item "custom": Use custom allocation specified in allocation_weights
}}

\item{allocation_weights}{Named vector or list specifying custom sample allocation
(required when allocation_method = "custom")}

\item{weight_column}{Character string naming column to use for proportional weighting
(optional, defaults to polygon area if not specified)}

\item{concurrent}{Logical indicating if multiple administrative units should be
processed simultaneously (default: TRUE)}

\item{progress}{Logical indicating if progress indicators should be shown (default: TRUE)}

\item{validate_boundaries}{Logical indicating if points should be validated to
fall within boundaries (default: TRUE)}

\item{max_attempts}{Integer maximum attempts to generate valid points per polygon
(default: 1000)}

\item{seed}{Optional random seed for reproducibility}
}
\value{
sf object containing sampled points with administrative unit identifiers
}
\description{
This function generates random coordinate points that fall strictly within
administrative polygon boundaries. It supports different allocation strategies
for distributing samples across multiple administrative units and includes
concurrent processing for large datasets.
}
\details{
Generate random coordinate points within administrative boundaries with
proportional or equal allocation strategies.


The function ensures all generated points fall strictly within the polygon
boundaries through validation. For complex polygons or small sample sizes,
this may require multiple attempts. The max_attempts parameter controls
the maximum number of attempts before giving up on a particular polygon.

Allocation methods:
\itemize{
  \item \strong{Proportional}: Samples allocated based on polygon area or specified weight column
  \item \strong{Equal}: Same number of samples per administrative unit
  \item \strong{Custom}: User-specified allocation via allocation_weights parameter
}

Concurrent processing can significantly speed up sampling for datasets with
many administrative units, but may use more memory.
}
\examples{
\donttest{
# Create sample administrative boundaries
library(sf)

# Proportional allocation based on area
admin_samples <- spatial_sample_administrative(
  admin_polygons = admin_boundaries,
  total_samples = 1000,
  allocation_method = "proportional"
)

# Equal allocation
equal_samples <- spatial_sample_administrative(
  admin_polygons = admin_boundaries,
  total_samples = 500,
  allocation_method = "equal"
)

# Custom allocation with specific weights
custom_samples <- spatial_sample_administrative(
  admin_polygons = admin_boundaries,
  total_samples = 800,
  allocation_method = "custom",
  allocation_weights = c("Unit_A" = 400, "Unit_B" = 300, "Unit_C" = 100)
)

# Proportional allocation based on population column
pop_samples <- spatial_sample_administrative(
  admin_polygons = admin_boundaries,
  total_samples = 1200,
  allocation_method = "proportional",
  weight_column = "population"
)
}

}
\seealso{
\code{\link{spatial_sample_random}}, \code{\link{spatial_sample_grid}}, 
  \code{\link{spatial_sample_stratified}}
}
