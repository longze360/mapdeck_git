% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/openlayers-provider.R
\name{OpenLayersProvider}
\alias{OpenLayersProvider}
\title{OpenLayers Provider Class}
\description{
The OpenLayersProvider class provides OpenLayers integration through the
provider interface with deck.gl overlay support. It supports various
sources and layer configurations specific to OpenLayers.
}
\details{
R6 class implementing the IMapProvider interface for OpenLayers.
}
\examples{
\donttest{
# Create OpenLayers provider
provider <- OpenLayersProvider$new()
provider$initialize_provider(list(source = "OSM"))
}

}
\section{Super class}{
\code{\link[mapdeck:IMapProvider]{mapdeck::IMapProvider}} -> \code{OpenLayersProvider}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{openlayers_config}}{OpenLayers configuration}

\item{\code{source_config}}{Source configuration}

\item{\code{current_style}}{Current map style}

\item{\code{layers}}{Active layers list}

\item{\code{map_instance}}{Map instance reference
Initialize Constructor

R6 constructor - sets up basic structure without full initialization.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-OpenLayersProvider-new}{\code{OpenLayersProvider$new()}}
\item \href{#method-OpenLayersProvider-initialize_provider}{\code{OpenLayersProvider$initialize_provider()}}
\item \href{#method-OpenLayersProvider-create_map}{\code{OpenLayersProvider$create_map()}}
\item \href{#method-OpenLayersProvider-update_style}{\code{OpenLayersProvider$update_style()}}
\item \href{#method-OpenLayersProvider-add_layer}{\code{OpenLayersProvider$add_layer()}}
\item \href{#method-OpenLayersProvider-remove_layer}{\code{OpenLayersProvider$remove_layer()}}
\item \href{#method-OpenLayersProvider-set_view}{\code{OpenLayersProvider$set_view()}}
\item \href{#method-OpenLayersProvider-get_available_styles}{\code{OpenLayersProvider$get_available_styles()}}
\item \href{#method-OpenLayersProvider-get_source_config}{\code{OpenLayersProvider$get_source_config()}}
\item \href{#method-OpenLayersProvider-create_custom_source}{\code{OpenLayersProvider$create_custom_source()}}
\item \href{#method-OpenLayersProvider-set_source_options}{\code{OpenLayersProvider$set_source_options()}}
\item \href{#method-OpenLayersProvider-create_wms_source}{\code{OpenLayersProvider$create_wms_source()}}
\item \href{#method-OpenLayersProvider-create_wmts_source}{\code{OpenLayersProvider$create_wmts_source()}}
\item \href{#method-OpenLayersProvider-create_vector_tile_source}{\code{OpenLayersProvider$create_vector_tile_source()}}
\item \href{#method-OpenLayersProvider-get_projection_info}{\code{OpenLayersProvider$get_projection_info()}}
\item \href{#method-OpenLayersProvider-set_projection}{\code{OpenLayersProvider$set_projection()}}
\item \href{#method-OpenLayersProvider-validate_config}{\code{OpenLayersProvider$validate_config()}}
\item \href{#method-OpenLayersProvider-destroy}{\code{OpenLayersProvider$destroy()}}
\item \href{#method-OpenLayersProvider-clone}{\code{OpenLayersProvider$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="mapdeck" data-topic="IMapProvider" data-id="get_capabilities"><a href='../../mapdeck/html/IMapProvider.html#method-IMapProvider-get_capabilities'><code>mapdeck::IMapProvider$get_capabilities()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mapdeck" data-topic="IMapProvider" data-id="is_initialized"><a href='../../mapdeck/html/IMapProvider.html#method-IMapProvider-is_initialized'><code>mapdeck::IMapProvider$is_initialized()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OpenLayersProvider-new"></a>}}
\if{latex}{\out{\hypertarget{method-OpenLayersProvider-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OpenLayersProvider$new()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
New OpenLayersProvider instance
Initialize Provider

Initialize the OpenLayers provider with configuration settings.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OpenLayersProvider-initialize_provider"></a>}}
\if{latex}{\out{\hypertarget{method-OpenLayersProvider-initialize_provider}{}}}
\subsection{Method \code{initialize_provider()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OpenLayersProvider$initialize_provider(config = list())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{config}}{List containing OpenLayers-specific configuration}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisible self for method chaining
Create Map Instance

Create a new OpenLayers map instance with deck.gl overlay.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OpenLayersProvider-create_map"></a>}}
\if{latex}{\out{\hypertarget{method-OpenLayersProvider-create_map}{}}}
\subsection{Method \code{create_map()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OpenLayersProvider$create_map(container = NULL, options = list())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{container}}{Character string identifying the HTML container}

\item{\code{options}}{List of map initialization options}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Map instance object (htmlwidget)
Update Map Style

Update the OpenLayers map source/style.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OpenLayersProvider-update_style"></a>}}
\if{latex}{\out{\hypertarget{method-OpenLayersProvider-update_style}{}}}
\subsection{Method \code{update_style()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OpenLayersProvider$update_style(style)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{style}}{Character string specifying the new source}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisible self for method chaining
Add Layer to Map

Add a deck.gl layer to the OpenLayers map.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OpenLayersProvider-add_layer"></a>}}
\if{latex}{\out{\hypertarget{method-OpenLayersProvider-add_layer}{}}}
\subsection{Method \code{add_layer()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OpenLayersProvider$add_layer(layer)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{layer}}{List containing layer configuration}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisible self for method chaining
Remove Layer from Map

Remove a layer from the OpenLayers map by its ID.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OpenLayersProvider-remove_layer"></a>}}
\if{latex}{\out{\hypertarget{method-OpenLayersProvider-remove_layer}{}}}
\subsection{Method \code{remove_layer()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OpenLayersProvider$remove_layer(layer_id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{layer_id}}{Character string identifying the layer to remove}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisible self for method chaining
Set Map View

Set the OpenLayers map view state.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OpenLayersProvider-set_view"></a>}}
\if{latex}{\out{\hypertarget{method-OpenLayersProvider-set_view}{}}}
\subsection{Method \code{set_view()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OpenLayersProvider$set_view(longitude, latitude, zoom, pitch = 0, bearing = 0)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{longitude}}{Numeric longitude coordinate}

\item{\code{latitude}}{Numeric latitude coordinate}

\item{\code{zoom}}{Numeric zoom level}

\item{\code{pitch}}{Numeric pitch angle (limited support in OpenLayers)}

\item{\code{bearing}}{Numeric bearing angle (rotation in OpenLayers)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisible self for method chaining
Get Available Styles

Get list of available OpenLayers sources with enhanced categorization.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OpenLayersProvider-get_available_styles"></a>}}
\if{latex}{\out{\hypertarget{method-OpenLayersProvider-get_available_styles}{}}}
\subsection{Method \code{get_available_styles()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OpenLayersProvider$get_available_styles(
  category = NULL,
  include_api_key_required = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{category}}{Character string to filter by category (optional)}

\item{\code{include_api_key_required}}{Logical indicating if sources requiring API keys should be included}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Character vector of available source names or named list if categorized
Get Source Configuration

Get detailed configuration for a specific OpenLayers source.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OpenLayersProvider-get_source_config"></a>}}
\if{latex}{\out{\hypertarget{method-OpenLayersProvider-get_source_config}{}}}
\subsection{Method \code{get_source_config()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OpenLayersProvider$get_source_config(source_name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{source_name}}{Character string identifying the source}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
List containing source configuration details
Create Custom Source

Create a custom OpenLayers source configuration.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OpenLayersProvider-create_custom_source"></a>}}
\if{latex}{\out{\hypertarget{method-OpenLayersProvider-create_custom_source}{}}}
\subsection{Method \code{create_custom_source()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OpenLayersProvider$create_custom_source(
  type,
  url,
  attribution = "",
  max_zoom = 18,
  min_zoom = 0,
  api_key = NULL,
  additional_params = list()
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{type}}{Character string indicating source type (XYZ, WMS, WMTS, etc.)}

\item{\code{url}}{Character string containing source URL template}

\item{\code{attribution}}{Character string for attribution text}

\item{\code{max_zoom}}{Numeric maximum zoom level}

\item{\code{min_zoom}}{Numeric minimum zoom level}

\item{\code{api_key}}{Character string for API key (if required)}

\item{\code{additional_params}}{List of additional source parameters}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
List containing custom source configuration
Set Source Options

Set advanced options for the current source.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OpenLayersProvider-set_source_options"></a>}}
\if{latex}{\out{\hypertarget{method-OpenLayersProvider-set_source_options}{}}}
\subsection{Method \code{set_source_options()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OpenLayersProvider$set_source_options(options)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{options}}{List containing source options}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisible self for method chaining
Create WMS Source

Create a Web Map Service (WMS) source configuration.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OpenLayersProvider-create_wms_source"></a>}}
\if{latex}{\out{\hypertarget{method-OpenLayersProvider-create_wms_source}{}}}
\subsection{Method \code{create_wms_source()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OpenLayersProvider$create_wms_source(
  url,
  layers,
  version = "1.3.0",
  format = "image/png",
  transparent = TRUE,
  attribution = "",
  additional_params = list()
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{url}}{Character string containing WMS service URL}

\item{\code{layers}}{Character vector of layer names to request}

\item{\code{version}}{Character string indicating WMS version (default: "1.3.0")}

\item{\code{format}}{Character string indicating image format (default: "image/png")}

\item{\code{transparent}}{Logical indicating if images should be transparent}

\item{\code{attribution}}{Character string for attribution text}

\item{\code{additional_params}}{List of additional WMS parameters}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
List containing WMS source configuration
Create WMTS Source

Create a Web Map Tile Service (WMTS) source configuration.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OpenLayersProvider-create_wmts_source"></a>}}
\if{latex}{\out{\hypertarget{method-OpenLayersProvider-create_wmts_source}{}}}
\subsection{Method \code{create_wmts_source()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OpenLayersProvider$create_wmts_source(
  url,
  layer,
  matrix_set,
  format = "image/png",
  attribution = "",
  style = "default",
  additional_params = list()
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{url}}{Character string containing WMTS service URL}

\item{\code{layer}}{Character string indicating layer name}

\item{\code{matrix_set}}{Character string indicating tile matrix set}

\item{\code{format}}{Character string indicating tile format (default: "image/png")}

\item{\code{attribution}}{Character string for attribution text}

\item{\code{style}}{Character string indicating style (default: "default")}

\item{\code{additional_params}}{List of additional WMTS parameters}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
List containing WMTS source configuration
Create Vector Tile Source

Create a vector tile source configuration.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OpenLayersProvider-create_vector_tile_source"></a>}}
\if{latex}{\out{\hypertarget{method-OpenLayersProvider-create_vector_tile_source}{}}}
\subsection{Method \code{create_vector_tile_source()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OpenLayersProvider$create_vector_tile_source(
  url,
  format = "MVT",
  attribution = "",
  max_zoom = 14,
  min_zoom = 0,
  additional_params = list()
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{url}}{Character string containing vector tile URL template}

\item{\code{format}}{Character string indicating vector format (default: "MVT")}

\item{\code{attribution}}{Character string for attribution text}

\item{\code{max_zoom}}{Numeric maximum zoom level}

\item{\code{min_zoom}}{Numeric minimum zoom level}

\item{\code{additional_params}}{List of additional parameters}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
List containing vector tile source configuration
Get Projection Information

Get information about supported projections.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OpenLayersProvider-get_projection_info"></a>}}
\if{latex}{\out{\hypertarget{method-OpenLayersProvider-get_projection_info}{}}}
\subsection{Method \code{get_projection_info()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OpenLayersProvider$get_projection_info(projection = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projection}}{Character string identifying the projection (optional)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
List containing projection information
Set Map Projection

Set the map projection for the OpenLayers map.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OpenLayersProvider-set_projection"></a>}}
\if{latex}{\out{\hypertarget{method-OpenLayersProvider-set_projection}{}}}
\subsection{Method \code{set_projection()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OpenLayersProvider$set_projection(projection, extent = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projection}}{Character string indicating the projection}

\item{\code{extent}}{Numeric vector of extent coordinates (optional)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisible self for method chaining
Validate Configuration

Validate OpenLayers-specific configuration.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OpenLayersProvider-validate_config"></a>}}
\if{latex}{\out{\hypertarget{method-OpenLayersProvider-validate_config}{}}}
\subsection{Method \code{validate_config()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OpenLayersProvider$validate_config(config)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{config}}{List containing configuration to validate}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Logical indicating if configuration is valid
Destroy Provider

Clean up resources and destroy the OpenLayers provider instance.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OpenLayersProvider-destroy"></a>}}
\if{latex}{\out{\hypertarget{method-OpenLayersProvider-destroy}{}}}
\subsection{Method \code{destroy()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OpenLayersProvider$destroy()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Invisible NULL
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OpenLayersProvider-clone"></a>}}
\if{latex}{\out{\hypertarget{method-OpenLayersProvider-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OpenLayersProvider$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
