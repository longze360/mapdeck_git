% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/concurrent-processor.R
\name{ConcurrentProcessor}
\alias{ConcurrentProcessor}
\title{Concurrent Processor Class}
\description{
The ConcurrentProcessor class manages parallel execution of sampling
operations across multiple administrative units, with support for progress
monitoring and resource management.
}
\details{
R6 class that provides parallel processing capabilities for administrative
sampling operations, enabling efficient processing of multiple administrative
units simultaneously.
}
\examples{
\donttest{
# Create concurrent processor
processor <- ConcurrentProcessor$new()
processor$initialize(max_workers = 4)

# Process administrative units in parallel
results <- processor$process_units(admin_polygons, sample_counts, 
                                   admin_column, use_gpu = TRUE)
}

}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{max_workers}}{Maximum number of parallel workers}

\item{\code{progress_enabled}}{Logical for progress reporting}

\item{\code{chunk_size}}{Number of units per processing chunk}

\item{\code{progress_bar}}{Progress bar object}

\item{\code{cluster}}{Parallel cluster object
Initialize Concurrent Processor

Initialize the concurrent processing system with specified configuration.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-ConcurrentProcessor-new}{\code{ConcurrentProcessor$new()}}
\item \href{#method-ConcurrentProcessor-process_units}{\code{ConcurrentProcessor$process_units()}}
\item \href{#method-ConcurrentProcessor-set_max_workers}{\code{ConcurrentProcessor$set_max_workers()}}
\item \href{#method-ConcurrentProcessor-enable_progress}{\code{ConcurrentProcessor$enable_progress()}}
\item \href{#method-ConcurrentProcessor-disable_progress}{\code{ConcurrentProcessor$disable_progress()}}
\item \href{#method-ConcurrentProcessor-get_statistics}{\code{ConcurrentProcessor$get_statistics()}}
\item \href{#method-ConcurrentProcessor-cleanup}{\code{ConcurrentProcessor$cleanup()}}
\item \href{#method-ConcurrentProcessor-clone}{\code{ConcurrentProcessor$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ConcurrentProcessor-new"></a>}}
\if{latex}{\out{\hypertarget{method-ConcurrentProcessor-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ConcurrentProcessor$new(config = list())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{config}}{List containing processor configuration}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisible self for method chaining
Process Administrative Units

Process multiple administrative units concurrently with progress
monitoring and efficient resource utilization.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ConcurrentProcessor-process_units"></a>}}
\if{latex}{\out{\hypertarget{method-ConcurrentProcessor-process_units}{}}}
\subsection{Method \code{process_units()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ConcurrentProcessor$process_units(
  admin_polygons,
  sample_counts,
  admin_column,
  use_gpu = TRUE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{admin_polygons}}{sf object with administrative polygons}

\item{\code{sample_counts}}{Named vector of sample counts per unit}

\item{\code{admin_column}}{Column name for administrative unit identifiers}

\item{\code{use_gpu}}{Logical for GPU acceleration}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
sf object with combined sampled points
Set Maximum Workers

Update the maximum number of parallel workers.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ConcurrentProcessor-set_max_workers"></a>}}
\if{latex}{\out{\hypertarget{method-ConcurrentProcessor-set_max_workers}{}}}
\subsection{Method \code{set_max_workers()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ConcurrentProcessor$set_max_workers(max_workers)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{max_workers}}{Integer maximum number of workers}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisible self for method chaining
Enable Progress Reporting

Enable progress bar and status reporting.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ConcurrentProcessor-enable_progress"></a>}}
\if{latex}{\out{\hypertarget{method-ConcurrentProcessor-enable_progress}{}}}
\subsection{Method \code{enable_progress()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ConcurrentProcessor$enable_progress()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Invisible self for method chaining
Disable Progress Reporting

Disable progress bar and status reporting.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ConcurrentProcessor-disable_progress"></a>}}
\if{latex}{\out{\hypertarget{method-ConcurrentProcessor-disable_progress}{}}}
\subsection{Method \code{disable_progress()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ConcurrentProcessor$disable_progress()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Invisible self for method chaining
Get Processing Statistics

Retrieve statistics about concurrent processing performance.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ConcurrentProcessor-get_statistics"></a>}}
\if{latex}{\out{\hypertarget{method-ConcurrentProcessor-get_statistics}{}}}
\subsection{Method \code{get_statistics()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ConcurrentProcessor$get_statistics()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
List containing processing statistics
Cleanup Resources

Clean up parallel cluster and progress resources.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ConcurrentProcessor-cleanup"></a>}}
\if{latex}{\out{\hypertarget{method-ConcurrentProcessor-cleanup}{}}}
\subsection{Method \code{cleanup()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ConcurrentProcessor$cleanup()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Invisible self for method chaining
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ConcurrentProcessor-clone"></a>}}
\if{latex}{\out{\hypertarget{method-ConcurrentProcessor-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ConcurrentProcessor$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
