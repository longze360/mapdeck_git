% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/style-management.R
\name{ThemeManager}
\alias{ThemeManager}
\title{Theme Manager Class}
\description{
The ThemeManager class provides functionality for creating and managing
consistent visual themes across different map providers, ensuring a
unified look and feel regardless of the underlying provider.
}
\details{
R6 class for managing consistent theming across providers.
}
\examples{
\donttest{
# Create theme manager
theme_manager <- ThemeManager$new()
theme_manager$apply_theme("dark", "mapbox")
}

}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{themes}}{List of available themes}

\item{\code{current_theme}}{Current active theme}

\item{\code{themes}}{Available themes}

\item{\code{current_theme}}{Current active theme
Initialize Theme Manager

Create a new theme manager instance.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-ThemeManager-new}{\code{ThemeManager$new()}}
\item \href{#method-ThemeManager-apply_theme}{\code{ThemeManager$apply_theme()}}
\item \href{#method-ThemeManager-get_available_themes}{\code{ThemeManager$get_available_themes()}}
\item \href{#method-ThemeManager-get_theme_info}{\code{ThemeManager$get_theme_info()}}
\item \href{#method-ThemeManager-create_custom_theme}{\code{ThemeManager$create_custom_theme()}}
\item \href{#method-ThemeManager-create_default_themes}{\code{ThemeManager$create_default_themes()}}
\item \href{#method-ThemeManager-clone}{\code{ThemeManager$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ThemeManager-new"></a>}}
\if{latex}{\out{\hypertarget{method-ThemeManager-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ThemeManager$new()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
New ThemeManager instance
Apply Theme

Apply a theme to a specific provider.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ThemeManager-apply_theme"></a>}}
\if{latex}{\out{\hypertarget{method-ThemeManager-apply_theme}{}}}
\subsection{Method \code{apply_theme()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ThemeManager$apply_theme(theme_name, provider_name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{theme_name}}{Character string identifying the theme}

\item{\code{provider_name}}{Character string identifying the provider}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
List containing theme configuration for the provider
Get Available Themes

Get list of available theme names.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ThemeManager-get_available_themes"></a>}}
\if{latex}{\out{\hypertarget{method-ThemeManager-get_available_themes}{}}}
\subsection{Method \code{get_available_themes()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ThemeManager$get_available_themes()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Character vector of theme names
Get Theme Info

Get information about a specific theme.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ThemeManager-get_theme_info"></a>}}
\if{latex}{\out{\hypertarget{method-ThemeManager-get_theme_info}{}}}
\subsection{Method \code{get_theme_info()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ThemeManager$get_theme_info(theme_name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{theme_name}}{Character string identifying the theme}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
List containing theme information
Create Custom Theme

Create a custom theme configuration.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ThemeManager-create_custom_theme"></a>}}
\if{latex}{\out{\hypertarget{method-ThemeManager-create_custom_theme}{}}}
\subsection{Method \code{create_custom_theme()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ThemeManager$create_custom_theme(
  name,
  description,
  style_base,
  provider_configs
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{Character string for theme name}

\item{\code{description}}{Character string describing the theme}

\item{\code{style_base}}{Character string for base style}

\item{\code{provider_configs}}{List of provider-specific configurations}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisible self for method chaining
Create Default Themes

Create default theme configurations.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ThemeManager-create_default_themes"></a>}}
\if{latex}{\out{\hypertarget{method-ThemeManager-create_default_themes}{}}}
\subsection{Method \code{create_default_themes()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ThemeManager$create_default_themes()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
List of default themes
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ThemeManager-clone"></a>}}
\if{latex}{\out{\hypertarget{method-ThemeManager-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ThemeManager$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
