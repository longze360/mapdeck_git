% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/webgl-shaders.R
\name{WebGLShaderManager}
\alias{WebGLShaderManager}
\title{WebGL Shader Manager}
\description{
The WebGLShaderManager class handles creation, compilation, and execution
of WebGL compute shaders for high-performance spatial sampling.
}
\details{
Manages WebGL compute shaders for spatial sampling operations.
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{gl_context}}{WebGL context}

\item{\code{shaders}}{Compiled shader programs}

\item{\code{buffers}}{GPU buffer objects}

\item{\code{initialized}}{Initialization status
Initialize WebGL Context

Initialize WebGL context and compile shaders.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-WebGLShaderManager-new}{\code{WebGLShaderManager$new()}}
\item \href{#method-WebGLShaderManager-execute_random_sampling}{\code{WebGLShaderManager$execute_random_sampling()}}
\item \href{#method-WebGLShaderManager-execute_grid_sampling}{\code{WebGLShaderManager$execute_grid_sampling()}}
\item \href{#method-WebGLShaderManager-execute_stratified_sampling}{\code{WebGLShaderManager$execute_stratified_sampling()}}
\item \href{#method-WebGLShaderManager-cleanup}{\code{WebGLShaderManager$cleanup()}}
\item \href{#method-WebGLShaderManager-clone}{\code{WebGLShaderManager$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-WebGLShaderManager-new"></a>}}
\if{latex}{\out{\hypertarget{method-WebGLShaderManager-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{WebGLShaderManager$new()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Logical indicating success
Execute Random Sampling Shader

Execute GPU compute shader for random sampling.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-WebGLShaderManager-execute_random_sampling"></a>}}
\if{latex}{\out{\hypertarget{method-WebGLShaderManager-execute_random_sampling}{}}}
\subsection{Method \code{execute_random_sampling()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{WebGLShaderManager$execute_random_sampling(coordinates, n, seed = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{coordinates}}{Matrix of x,y coordinates}

\item{\code{n}}{Number of samples to generate}

\item{\code{seed}}{Random seed}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Vector of sample indices
Execute Grid Sampling Shader

Execute GPU compute shader for grid sampling.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-WebGLShaderManager-execute_grid_sampling"></a>}}
\if{latex}{\out{\hypertarget{method-WebGLShaderManager-execute_grid_sampling}{}}}
\subsection{Method \code{execute_grid_sampling()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{WebGLShaderManager$execute_grid_sampling(
  coordinates,
  grid_size,
  aggregation_method
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{coordinates}}{Matrix of x,y coordinates}

\item{\code{grid_size}}{Grid cell size}

\item{\code{aggregation_method}}{Aggregation method}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Vector of sample indices
Execute Stratified Sampling Shader

Execute GPU compute shader for stratified sampling.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-WebGLShaderManager-execute_stratified_sampling"></a>}}
\if{latex}{\out{\hypertarget{method-WebGLShaderManager-execute_stratified_sampling}{}}}
\subsection{Method \code{execute_stratified_sampling()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{WebGLShaderManager$execute_stratified_sampling(
  coordinates,
  strata,
  n_per_stratum
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{coordinates}}{Matrix of x,y coordinates}

\item{\code{strata}}{Vector of stratum assignments}

\item{\code{n_per_stratum}}{Samples per stratum}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Vector of sample indices
Cleanup Resources

Clean up WebGL resources.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-WebGLShaderManager-cleanup"></a>}}
\if{latex}{\out{\hypertarget{method-WebGLShaderManager-cleanup}{}}}
\subsection{Method \code{cleanup()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{WebGLShaderManager$cleanup()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Invisible NULL
Create Mock GL Context

Create a mock WebGL context for testing.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-WebGLShaderManager-clone"></a>}}
\if{latex}{\out{\hypertarget{method-WebGLShaderManager-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{WebGLShaderManager$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
