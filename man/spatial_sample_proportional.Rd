% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/proportional-sampler.R
\name{spatial_sample_proportional}
\alias{spatial_sample_proportional}
\title{Proportional Administrative Sampling by Ratio}
\usage{
spatial_sample_proportional(
  admin_polygons,
  variable_column,
  ratio = 1,
  min_samples = 1,
  max_samples = Inf,
  admin_column = NULL,
  concurrent = FALSE,
  seed = NULL
)
}
\arguments{
\item{admin_polygons}{sf object containing administrative boundary polygons}

\item{variable_column}{Character column name containing the variable to sample from}

\item{ratio}{Numeric sampling ratio (e.g., 0.1 for 10%, 0.01 for 1%, 2.0 for 200%)}

\item{min_samples}{Integer minimum samples per region (default: 1)}

\item{max_samples}{Integer maximum samples per region (default: Inf)}

\item{admin_column}{Character column name for administrative unit identifiers}

\item{concurrent}{Logical whether to use concurrent processing}

\item{seed}{Integer optional random seed for reproducibility}
}
\value{
sf object with sampled points including sampling metadata
}
\description{
Generate samples within administrative boundaries based on a variable
using specified numeric sampling ratios.
}
\details{
This function is specifically designed for common administrative region
sampling scenarios where samples are needed proportional to a variable
(like population, disease cases, etc.) at specified numeric ratios:

- 1.0 - One sample per unit of the variable (1:1)
- 0.1 - One sample per 10 units of the variable (1:10)  
- 0.01 - One sample per 100 units of the variable (1:100)
- 0.001 - One sample per 1000 units of the variable (1:1000)
- 2.0 - Two samples per unit of the variable (2:1)

The function ensures minimum and maximum sample constraints are respected
and provides detailed metadata about the sampling process.
}
\examples{
\donttest{
# Create sample administrative data with population
library(sf)
coords_list <- list(
  matrix(c(0, 0, 1, 0, 1, 1, 0, 1, 0, 0), ncol = 2, byrow = TRUE),
  matrix(c(1, 0, 3, 0, 3, 1, 1, 1, 1, 0), ncol = 2, byrow = TRUE),
  matrix(c(0, 1, 2, 1, 2, 2.5, 0, 2.5, 0, 1), ncol = 2, byrow = TRUE)
)
polygons <- lapply(coords_list, function(x) st_polygon(list(x)))
admin_data <- data.frame(
  admin_id = c("A", "B", "C"),
  population = c(1000, 5000, 2000),
  cases = c(10, 50, 20)
)
admin_sf <- st_sf(admin_data, geometry = st_sfc(polygons), crs = 4326)

# 0.001 population sampling (1 sample per 1000 people)
pop_samples <- spatial_sample_proportional(
  admin_sf, 
  variable_column = "population",
  ratio = 0.001
)

# 0.1 case sampling (1 sample per 10 cases)
case_samples <- spatial_sample_proportional(
  admin_sf,
  variable_column = "cases", 
  ratio = 0.1
)

# 1.0 sampling with constraints (1:1 ratio)
constrained_samples <- spatial_sample_proportional(
  admin_sf,
  variable_column = "cases",
  ratio = 1.0,
  min_samples = 2,
  max_samples = 10
)
}

}
