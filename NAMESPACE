# Generated by roxygen2: do not edit by hand

S3method(findEncodedColumn,default)
S3method(findEncodedColumn,sfencoded)
S3method(get_box,data.frame)
S3method(get_box,interleaved)
S3method(get_box,mesh3d)
S3method(get_box,quadmesh)
S3method(get_box,sf)
S3method(get_box,sfencoded)
S3method(get_m_range,default)
S3method(get_m_range,sf)
S3method(get_od_box,data.frame)
S3method(get_od_box,sf)
S3method(mapdeck_legend,default)
S3method(mapdeck_legend,mapdeck_legend)
S3method(normaliseMultiSfData,sf)
S3method(normaliseSfData,default)
S3method(normaliseSfData,sf)
S3method(normaliseSfData,sfencoded)
S3method(normalisesGeojsonData,character)
S3method(normalisesGeojsonData,default)
S3method(normalisesGeojsonData,sf)
S3method(print,mapdeck_api)
S3method(resolve_binary_data,sf)
S3method(resolve_data,data.frame)
S3method(resolve_data,default)
S3method(resolve_data,mesh3d)
S3method(resolve_data,quadmesh)
S3method(resolve_data,sf)
S3method(resolve_data,sfencoded)
S3method(resolve_data,sfencodedLite)
S3method(resolve_elevation_data,data.frame)
S3method(resolve_elevation_data,sf)
S3method(resolve_elevation_data,sfencoded)
S3method(resolve_elevation_data,sfencodedLite)
S3method(resolve_geojson_data,character)
S3method(resolve_geojson_data,default)
S3method(resolve_geojson_data,geojson)
S3method(resolve_geojson_data,json)
S3method(resolve_geojson_data,sf)
S3method(resolve_od_data,data.frame)
S3method(resolve_od_data,sf)
S3method(resolve_od_data,sfencoded)
S3method(resolve_od_data,sfencodedLite)
export("%>%")
export(IMapProvider)
export(ProviderConfig)
export(ProviderFactory)
export(ProviderRegistry)
export(SamplingEngine)
export(StyleResolver)
export(StyleValidator)
export(ThemeManager)
export(add_animated_arc)
export(add_animated_line)
export(add_arc)
export(add_bitmap)
export(add_cesium)
export(add_column)
export(add_dependencies)
export(add_geojson)
export(add_greatcircle)
export(add_grid)
export(add_h3)
export(add_heatmap)
export(add_hexagon)
export(add_i3s)
export(add_legend)
export(add_line)
export(add_mesh)
export(add_path)
export(add_pointcloud)
export(add_polygon)
export(add_scatterplot)
export(add_screengrid)
export(add_sf)
export(add_terrain)
export(add_text)
export(add_title)
export(add_trips)
export(apply_map_theme)
export(check_gpu_acceleration)
export(check_provider_compatibility)
export(clear_animated_arc)
export(clear_arc)
export(clear_bitmap)
export(clear_column)
export(clear_geojson)
export(clear_greatcircle)
export(clear_grid)
export(clear_h3)
export(clear_h3_hexagon)
export(clear_heatmap)
export(clear_hexagon)
export(clear_legend)
export(clear_line)
export(clear_mesh)
export(clear_path)
export(clear_pointcloud)
export(clear_polygon)
export(clear_scatterplot)
export(clear_screengrid)
export(clear_terrain)
export(clear_text)
export(clear_title)
export(clear_tokens)
export(clear_trips)
export(create_default_provider_configs)
export(create_provider)
export(create_sampling_engine)
export(get_access_token)
export(get_available_styles)
export(get_coordinate_transformer)
export(get_provider_capabilities)
export(get_provider_config)
export(get_provider_env_vars)
export(get_provider_factory)
export(get_sampling_performance)
export(get_style_resolver)
export(get_style_validator)
export(get_theme_manager)
export(invoke_method)
export(legend_element)
export(list_available_providers)
export(mapdeck)
export(mapdeckOutput)
export(mapdeck_dependencies)
export(mapdeck_dispatch)
export(mapdeck_legend)
export(mapdeck_style)
export(mapdeck_tokens)
export(mapdeck_update)
export(mapdeck_view)
export(normalize_style_name)
export(register_provider)
export(renderMapdeck)
export(reset_sampling_performance)
export(set_token)
export(spatial_sample_administrative)
export(spatial_sample_grid)
export(spatial_sample_random)
export(spatial_sample_stratified)
export(update_provider)
export(update_style)
export(validate_layer_config)
export(validate_map_options)
export(validate_map_style)
export(validate_provider_interface)
export(validate_provider_name)
import(htmlwidgets)
importFrom(Rcpp,sourceCpp)
importFrom(magrittr,"%>%")
useDynLib(mapdeck, .registration = TRUE)
